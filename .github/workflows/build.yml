name: Create new realease

on:
  push:
    branches:
      - "**"
    tags:
      - "!**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
          - uses: actions/checkout@main
          - name: Install fuse and libfuse2
            run: |
              sudo apt install fuse libfuse2

          - name: Get appimagetool
            run: |
              set -x
              cd ../
              #wget -q https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
              #wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage

              version_go_appimage=$(wget -q -O - https://api.github.com/repos/probonopd/go-appimage/releases | grep "\"name.*appimagetool-.*-x86_64.AppImage\"" | head -n 1 | cut -d '-' -f2)
              echo "version_go_appimage: $version_go_appimage"

              wget -q "https://github.com/probonopd/go-appimage/releases/download/continuous/appimagetool-$version_go_appimage-x86_64.AppImage" -O appimagetool-x86_64.AppImage
              chmod +x appimagetool-x86_64.AppImage
              pwd; ls -lah

          - name: Get URUNTIME
            run: |
              set -x
              cd ../
              wget https://github.com/VHSgunzo/uruntime/releases/latest/download/uruntime-appimage-dwarfs-x86_64 -O uruntime
              chmod +x ./uruntime
              pwd; ls -lah

          - name: Install llvm - URUNTIME
            run: sudo apt install llvm

          - name: Get Zotero
            run: |
              set -x
              version=$(grep -o "Zotero:.*" README.md | cut -d ' ' -f2)
              echo "Zotero version: $version"

              wget "https://download.zotero.org/client/release/$version/Zotero-${version}_linux-x86_64.tar.bz2"
              tar -xvf "Zotero-${version}_linux-x86_64.tar.bz2"

          - name: Make Appimage
            run: |
              set -x
              version=$(grep -o "Zotero:.*" README.md | cut -d ' ' -f2)
              echo "Zotero version: $version"

              cat > AppRun << 'EOF'
              #!/bin/bash
              HERE="$(dirname "$(readlink -f "${0}")")"
              EXEC="${HERE}/Zotero_linux-x86_64/zotero"
              exec "${EXEC}"
              EOF

              chmod +x AppRun
              cat AppRun

              cat > Zotero.desktop << 'EOF'
              [Desktop Entry]
              Name=Zotero
              Exec=Zotero_linux-x86_64/zotero
              Icon=Zotero
              Type=Application
              Categories=Utility
              EOF

              chmod +x Zotero.desktop
              #sed -i "s/Name=Zotero/Name=Zotero-$version/" Zotero.desktop
              cat Zotero.desktop

              ln -s Zotero_linux-x86_64/icons/icon128.png Zotero.png
              ls -lah

              rm -v "Zotero-${version}_linux-x86_64.tar.bz2"
              rm -vr .git/ .github/
              ls -lah

              cd ../
              ls -lah

              #ARCH=x86_64 VERSION="${version}-1_JB" ./appimagetool-x86_64.AppImage Zotero_AppImage/

              tag_version=1
              name_prog="Zotero-${version}-${tag_version}_JB-x86_64.AppImage"

              # Add update information to runtime
              UPINFO="gh-releases-zsync|$(echo "$GITHUB_REPOSITORY" | tr '/' '|')|latest|*dwarfs-$ARCH.AppImage.zsync"
              echo "Adding update information \"$UPINFO\" to runtime..."
              printf "$UPINFO" > data.upd_info
              llvm-objcopy --update-section=.upd_info=data.upd_info \
                  --set-section-flags=.upd_info=noload,readonly ./uruntime
              printf 'AI\x02' | dd of=./uruntime bs=1 count=3 seek=8 conv=notrunc

              echo "Generating AppImage..."
              ./uruntime --appimage-mkdwarfs -f \
                  --set-owner 0 --set-group 0 \
                  --no-history --no-create-timestamp \
                  --compression zstd:level=22 -S26 -B8 \
                  --header uruntime \
                  -i ./Zotero_AppImage -o $name_prog

              echo "Generating zsync file..."
              #zsyncmake *.AppImage -u *.AppImage
              zsyncmake "$name_prog" -u "$name_prog"
        
              fileName=$(ls Zotero*.AppImage)
              echo "fileName: $fileName"
              #mv "$fileName" "Zotero-$version-x86_64-1_JB.AppImage"
              #md5sum "Zotero-$version-x86_64-1_JB.AppImage" > "Zotero-$version-x86_64-1_JB.AppImage.md5"
              md5sum "$fileName" > "${fileName}.md5"
              pwd; ls -lah

              mv Zotero*.AppImage Zotero*.zsync Zotero*.md5 Zotero_AppImage/
              ls -lah Zotero_AppImage/

          # Build - Error: Resource not accessible by integration
          # Change Settings -> Actions -> General -> Workflow Permissions to allow read and write:
          # https://github.com/actions/first-interaction/issues/10#issuecomment-1506118886

          # https://github.com/marketplace/actions/upload-to-github-release
          - uses: xresloader/upload-to-github-release@main
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
              file: "Zotero*.AppImage; Zotero*.zsync; Zotero*.md5"
              #delete_file: "random-name-*.txt;random-*.txt"
              release_id: ${{ steps.create_release.outputs.id }}
              #overwrite: true
              verbose: true
              #tags: true
              draft: false
              default_release_name: "Zotero V in AppImage"
